// app/api/activities/route.ts
import { NextResponse } from 'next/server';

// ‡πÉ‡∏ä‡πâ global variable ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ memory sharing
declare global {
  var activities: any[];
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ global activities ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
if (!global.activities) {
  global.activities = [];
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
async function sendToDiscord(activity: any) {
  console.log('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord...');
  const webhookUrl = 'https://discord.com/api/webhooks/1400046836131299348/j2g_XnSCSQotXrbQsngY4pKFIFL5wMjetjqCShnugMYijMzcts3imUuo-QwAKPkyd3iD';
  
  console.log('Discord webhook URL:', webhookUrl ? '‡∏û‡∏ö' : '‡πÑ‡∏°‡πà‡∏û‡∏ö');
  
  if (!webhookUrl) {
    console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö Discord webhook URL');
    return;
  }

  try {
    console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á embed message...');
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord
    const embed: any = {
      title: `üéØ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà: ${activity.customType || activity.type}`,
      description: `**‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** ${activity.user}\n**‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:** ${activity.customType || activity.type}\n**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** ${new Date(activity.date).toLocaleString('th-TH')}`,
      color: getActivityColor(activity.type),
      fields: [],
      timestamp: new Date().toISOString(),
      footer: {
        text: 'Check-in App'
      }
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    if (activity.amount) {
      embed.fields.push({
        name: 'üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
        value: `${activity.amount} ‡∏ö‡∏≤‡∏ó`,
        inline: true
      });
    }

    if (activity.customTime) {
      embed.fields.push({
        name: '‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤',
        value: activity.customTime,
        inline: true
      });
    }

    if (activity.proofUrl) {
      embed.fields.push({
        name: 'üìé ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô',
        value: activity.proofUrl,
        inline: true
      });
    }

    const payload = {
      embeds: [embed]
    };

    console.log('‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord webhook...');
    console.log('Payload:', JSON.stringify(payload, null, 2));

    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    console.log('Discord response status:', response.status);
    console.log('Discord response ok:', response.ok);

    if (response.ok) {
      console.log('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } else {
      const errorText = await response.text();
      console.error('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', response.status, errorText);
    }
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
function getActivityColor(type: string): number {
  switch (type) {
    case 'checkin':
      return 0x00ff00; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    case 'leave':
      return 0xffa500; // ‡∏™‡∏µ‡∏™‡πâ‡∏°
    case 'payment':
      return 0x0099ff; // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
    case 'custom':
      return 0xff69b4; // ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π
    default:
      return 0x808080; // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
  }
}

// POST - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
export async function POST(request: Request) {
  console.log('POST request received');
  console.log('Environment variables:');
  console.log('- DISCORD_WEBHOOK_URL:', process.env.DISCORD_WEBHOOK_URL ? '‡∏û‡∏ö' : '‡πÑ‡∏°‡πà‡∏û‡∏ö');
  console.log('- NODE_ENV:', process.env.NODE_ENV);
  
  try {
    const data = await request.json();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!data.user || !data.type || !data.date) {
      return NextResponse.json({ error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' }, { status: 400 });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡πÅ‡∏•‡∏∞ timestamp
    const newActivity = {
      ...data,
      id: `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      createdAt: new Date().toISOString()
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô global activities
    global.activities.push(newActivity);

    console.log('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', newActivity);
    console.log('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô memory:', global.activities.length);
    console.log('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', JSON.stringify(global.activities, null, 2));

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå)
    sendToDiscord(newActivity).catch(error => {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord:', error);
    });

    // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    // ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
    // try {
    //   console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord...');
    //   const summaryResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000'}/api/summary-discord`, {
    //     method: 'POST',
    //     headers: {
    //       'Content-Type': 'application/json',
    //     },
    //   });
      
    //   if (summaryResponse.ok) {
    //     console.log('‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    //   } else {
    //     console.error('‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', summaryResponse.status);
    //   }
    // } catch (error) {
    //   console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    // }

    return NextResponse.json({ message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', activity: newActivity }, { status: 201 });
  } catch (error) {
    console.error('API POST /activities error:', error);
    const errorMessage = error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå';
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}

// GET - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export async function GET() {
  try {
    console.log('GET activities, count:', global.activities.length);
    return NextResponse.json(global.activities, { status: 200 });
  } catch (error) {
    console.error('API GET /activities error:', error);
    return NextResponse.json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' }, { status: 500 });
  }
}
