// app/api/summary-discord/route.ts
import { NextResponse } from 'next/server';

// ‡πÉ‡∏ä‡πâ global variable ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ memory sharing
declare global {
  var activities: any[];
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ global activities ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
if (!global.activities) {
  global.activities = [];
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
function generateUserSummaries(activitiesData: any[]) {
  const userMap = new Map();

  activitiesData.forEach(activity => {
    if (!userMap.has(activity.user)) {
      userMap.set(activity.user, {
        user: activity.user,
        leaveCount: 0,
        paymentCount: 0,
        customActivities: [],
        totalAmount: 0,
        leaveDates: [],
        paymentDates: [],
        lastActivity: activity.createdAt
      });
    }

    const userSummary = userMap.get(activity.user);
    
    switch (activity.type) {
      case 'leave':
        userSummary.leaveCount++;
        userSummary.leaveDates.push(new Date(activity.date).toLocaleDateString('th-TH'));
        break;
      case 'payment':
        userSummary.paymentCount++;
        userSummary.totalAmount += activity.amount || 0;
        userSummary.paymentDates.push(new Date(activity.date).toLocaleDateString('th-TH'));
        break;
      case 'custom':
        const activityName = `${activity.customType} ${activity.customTime}`;
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        if (!userSummary.customActivities.includes(activityName)) {
          userSummary.customActivities.push(activityName);
        }
        break;
    }

    if (new Date(activity.createdAt) > new Date(userSummary.lastActivity)) {
      userSummary.lastActivity = activity.createdAt;
    }
  });

  return Array.from(userMap.values());
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
function createSummaryTable(userSummaries: any[]) {
  let table = '```\n';
  table += 'üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n';
  table += '‚ïê'.repeat(80) + '\n';
  table += '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏•‡∏≤ ‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°(‡∏ö‡∏≤‡∏ó)\n';
  table += '‚îÄ'.repeat(80) + '\n';

  userSummaries.forEach(user => {
    const leaveCount = user.leaveCount || 0;
    const paymentCount = user.paymentCount || 0;
    const customCount = user.customActivities.length || 0;
    const totalAmount = user.totalAmount || 0;
    
    table += `${user.user} ${leaveCount} ${paymentCount} ${customCount} ${totalAmount}\n`;
  });

  table += '‚ïê'.repeat(80) + '\n';
  table += '```';
  return table;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
function createDetailedDates(userSummaries: any[]) {
  let details = '```\n';
  details += 'üìÖ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà\n';
  details += '‚ïê'.repeat(80) + '\n';

  userSummaries.forEach(user => {
    details += `üë§ ${user.user}\n`;
    
    if (user.leaveDates.length > 0) {
      details += `  üìÖ ‡∏•‡∏≤: ${user.leaveDates.join(', ')}\n`;
    }
    
    if (user.paymentDates.length > 0) {
      details += `  üí∞ ‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô: ${user.paymentDates.join(', ')}\n`;
    }

    if (user.customActivities.length > 0) {
      details += `  üéâ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©:\n`; // New line after header
      user.customActivities.forEach(activity => {
        details += `    ${activity}\n`; // Each activity on a new line with indentation
      });
    }
    
    details += '\n';
  });

  details += '```';
  return details;
}

// POST - ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
export async function POST() {
  console.log('‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord...');
  const webhookUrl = 'https://discord.com/api/webhooks/1400046836131299348/j2g_XnSCSQotXrbQsngY4pKFIFL5wMjetjqCShnugMYijMzcts3imUuo-QwAKPkyd3iD';
  
  console.log('Webhook URL:', webhookUrl ? '‡∏û‡∏ö' : '‡πÑ‡∏°‡πà‡∏û‡∏ö');
  
  if (!webhookUrl) {
    return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö Discord webhook URL' }, { status: 400 });
  }

  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å global activities
    const activities = global.activities || [];
    
    console.log('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ:', activities.length);
    console.log('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', JSON.stringify(activities, null, 2));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° custom
    const customActivities = activities.filter(a => a.type === 'custom');
    console.log('‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° custom ‡∏ó‡∏µ‡πà‡∏û‡∏ö:', customActivities.length);
    console.log('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° custom:', JSON.stringify(customActivities, null, 2));
    
    if (activities.length === 0) {
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°' }, { status: 400 });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const userSummaries = generateUserSummaries(activities);
    console.log('User Summaries:', JSON.stringify(userSummaries, null, 2));

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
    const summaryTable = createSummaryTable(userSummaries);
    console.log('Summary Table:', summaryTable);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const detailedDates = createDetailedDates(userSummaries);
    console.log('Detailed Dates:', detailedDates);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord
    const embed = {
      title: 'üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
      description: `**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** ${userSummaries.length} ‡∏Ñ‡∏ô\n**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó:** ${new Date().toLocaleDateString('th-TH')}`,
      color: 0x0099ff,
      fields: [
        {
          name: 'üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°',
          value: `üìÖ ‡∏•‡∏≤: ${userSummaries.reduce((sum, u) => sum + u.leaveCount, 0)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nüí∞ ‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô: ${userSummaries.reduce((sum, u) => sum + u.paymentCount, 0)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nüéâ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©: ${userSummaries.reduce((sum, u) => sum + u.customActivities.length, 0)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nüíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${userSummaries.reduce((sum, u) => sum + u.totalAmount, 0)} ‡∏ö‡∏≤‡∏ó`,
          inline: false
        }
      ],
      timestamp: new Date().toISOString(),
      footer: {
        text: 'Check-in App Summary'
      }
    };

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
    const payload = {
      embeds: [embed],
      content: `${summaryTable}\n\n${detailedDates}`
    };

    console.log('‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord...');
    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    console.log('Discord response status:', response.status);
    console.log('Discord response ok:', response.ok);

    if (response.ok) {
      console.log('‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return NextResponse.json({ message: '‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } else {
      const errorText = await response.text();
      console.error('‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', response.status, errorText);
      return NextResponse.json({ error: '‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' }, { status: 500 });
    }
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    return NextResponse.json({ error: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error}` }, { status: 500 });
  }
} 